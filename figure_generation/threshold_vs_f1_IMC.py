import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os

# 图像参数
plt.rcParams.update({
    'font.size': 18,
    'axes.titlesize': 22,
    'axes.labelsize': 18,
    'xtick.labelsize': 16,
    'ytick.labelsize': 16,
    'legend.fontsize': 20,
    'font.family': 'Times New Roman',
    'pdf.fonttype': 42,  # 适用于 LaTeX 编译
    'ps.fonttype': 42,
    'text.usetex': False,  # 若使用 LaTeX 可改成 True
})

os.makedirs('fig', exist_ok=True)

# 加载数据
data = '''10000000,20,20,272,8,32,4,10,10,5,1,272,16,0.8571,0.4545,0.594,12.28,13,0.5,0.3
10000000,20,40,272,8,32,4,10,20,10,1,272,16,0.7321,0.6212,0.6721,8.67,26,0.5,0.3
10000000,20,60,272,8,32,4,10,30,15,1,272,16,0.7273,0.7273,0.7273,8.39,40,0.5,0.3
10000000,20,80,272,8,32,4,10,40,20,1,272,16,0.7237,0.8333,0.7746,9.49,53,0.5,0.3
10000000,20,100,272,8,32,4,10,50,25,1,272,16,0.7262,0.9242,0.8133,9.51,67,0.5,0.3
10000000,20,120,272,8,32,4,10,60,30,1,272,16,0.7241,0.9545,0.8235,10.49,80,0.5,0.3
10000000,20,140,272,8,32,4,10,70,35,1,272,16,0.6854,0.9242,0.7871,10.65,94,0.5,0.3
10000000,20,20,272,8,32,4,10,10,5,1,272,16,1.0,0.3788,0.5495,9.4,13,0.5,0.4
10000000,20,40,272,8,32,4,10,20,10,1,272,16,0.8235,0.4242,0.56,9.18,26,0.5,0.4
10000000,20,60,272,8,32,4,10,30,15,1,272,16,0.8333,0.5303,0.6481,10.2,40,0.5,0.4
10000000,20,80,272,8,32,4,10,40,20,1,272,16,0.8421,0.7273,0.7805,10.9,53,0.5,0.4
10000000,20,100,272,8,32,4,10,50,25,1,272,16,0.8333,0.8333,0.8333,11.4,67,0.5,0.4
10000000,20,120,272,8,32,4,10,60,30,1,272,16,0.8507,0.8636,0.8571,12.04,80,0.5,0.4
10000000,20,140,272,8,32,4,10,70,35,1,272,16,0.863,0.9545,0.9064,12.5,94,0.5,0.4
10000000,20,20,272,8,32,4,10,10,5,1,272,16,1.0,0.3182,0.4828,9.89,13,0.5,0.5
10000000,20,40,272,8,32,4,10,20,10,1,272,16,1.0,0.3485,0.5169,10.49,26,0.5,0.5
10000000,20,60,272,8,32,4,10,30,15,1,272,16,1.0,0.4848,0.653,11.64,40,0.5,0.5
10000000,20,80,272,8,32,4,10,40,20,1,272,16,1.0,0.6212,0.7663,12.47,53,0.5,0.5
10000000,20,100,272,8,32,4,10,50,25,1,272,16,1.0,0.7273,0.8421,12.94,67,0.5,0.5
10000000,20,120,272,8,32,4,10,60,30,1,272,16,0.9818,0.8182,0.8926,13.68,80,0.5,0.5
10000000,20,140,272,8,32,4,10,70,35,1,272,16,1.0,0.8939,0.944,13.91,94,0.5,0.5
10000000,20,20,272,8,32,4,10,10,5,1,272,16,1.0,0.2121,0.35,10.24,13,0.5,0.6
10000000,20,40,272,8,32,4,10,20,10,1,272,16,1.0,0.2727,0.4285,11.24,26,0.5,0.6
10000000,20,60,272,8,32,4,10,30,15,1,272,16,1.0,0.3788,0.5495,12.76,40,0.5,0.6
10000000,20,80,272,8,32,4,10,40,20,1,272,16,1.0,0.5455,0.7059,13.06,53,0.5,0.6
10000000,20,100,272,8,32,4,10,50,25,1,272,16,1.0,0.6818,0.8108,13.95,67,0.5,0.6
10000000,20,120,272,8,32,4,10,60,30,1,272,16,0.9792,0.7121,0.8246,14.89,80,0.5,0.6
10000000,20,140,272,8,32,4,10,70,35,1,272,16,1.0,0.7879,0.8814,15.31,94,0.5,0.6
10000000,20,20,272,8,32,4,10,10,5,1,272,16,1.0,0.197,0.3292,10.78,13,0.5,0.7
10000000,20,40,272,8,32,4,10,20,10,1,272,16,1.0,0.2121,0.35,12.06,26,0.5,0.7
10000000,20,60,272,8,32,4,10,30,15,1,272,16,1.0,0.3636,0.5333,12.74,40,0.5,0.7
10000000,20,80,272,8,32,4,10,40,20,1,272,16,1.0,0.5152,0.68,25.32,53,0.5,0.7
10000000,20,100,272,8,32,4,10,50,25,1,272,16,1.0,0.6364,0.7778,19.27,67,0.5,0.7
10000000,20,120,272,8,32,4,10,60,30,1,272,16,1.0,0.6364,0.7778,18.14,80,0.5,0.7
10000000,20,140,272,8,32,4,10,70,35,1,272,16,1.0,0.7273,0.8421,30.71,94,0.5,0.7

'''
columns = [
    "packet_size", "entry_size", "filter1_d", "filter1_w", "filter1_ct", "flow_id_size",
    "simi_size", "timestamp_size", "filter2_main_num", "filter2_alter_num", "cm_depth",
    "cm_width", "cm_ct", "precision", "recall", "f1-score", "insert-time", "space(KB)",
    "filter1_threshold", "filter2_threshold"
]

df = pd.DataFrame([line.split(',') for line in data.strip().split('\n')], columns=columns)
df = df.rename(columns={'filter2_threshold': 'threshold'})

# 类型转换
df = df.astype({
    'precision': 'float',
    'recall': 'float',
    'f1-score': 'float',
    'space(KB)': 'float',
    'threshold': 'float'
})

# 过滤内存不超过150KB的数据
df = df[df['space(KB)'] <= 150]

# 所有的阈值
colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728',
          '#9467bd', '#8c564b', '#e377c2']  # 可自行扩展
markers = ['s', 'o', 'v', '^', 'D', '<', 'p']
linestyles = ['-', '--', '-.', ':', '-', '--', '-.']

thresholds = sorted(df['threshold'].unique())

# 多子图绘制函数（3图横排 + 子图标题 + 上方图例）
def plot_metrics(metrics, ylabels, filename):
    fig, axs = plt.subplots(1, 3, figsize=(18, 6), dpi=300, sharey=False)

    for idx, (metric, ylabel) in enumerate(zip(metrics, ylabels)):
        ax = axs[idx]
        for i, t in enumerate(thresholds):
            sub_df = df[df['threshold'] == t].copy()
            ax.plot(sub_df['space(KB)'], sub_df[metric],
                    label=f"$\\theta$={t:.1f}",
                    linewidth=2.5,
                    linestyle=linestyles[i % len(linestyles)],
                    color=colors[i % len(colors)],
                    marker=markers[i % len(markers)],
                    markersize=7)

        ax.set_xlabel(r"Memory (KB)", fontweight='bold')
        ax.set_ylabel(f"{ylabel}", fontweight='bold')
        ax.grid(True, linestyle=':', alpha=0.5)

        # 子图标题（放底部）
        ax.set_title(f"({chr(97+idx)}) {ylabel}",
                     fontweight='bold', y=-0.35)

    # 图例放在顶部居中
    handles, labels = axs[0].get_legend_handles_labels()
    fig.legend(handles, labels, loc='upper center',
               ncol=len(thresholds), frameon=True,
           edgecolor='black',
               fontsize=16,prop={'weight': 'bold'})

    plt.tight_layout(rect=[0, 0, 1, 0.93])  # 留出图例空间
    plt.savefig(f'fig/{filename}.pdf', bbox_inches='tight', facecolor='white')
    plt.show()


# 调用函数：三个指标统一绘制
plot_metrics(['precision', 'recall','f1-score'],
             ['Precision', 'Recall','F1-Score'],
             'metrics_vs_memory_diff_threshold')